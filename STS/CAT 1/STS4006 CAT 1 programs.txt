//Loop detection

import java.util.Scanner;
class list{
    Node head=null;
    class Node{
        int data;
        Node next;
        Node(int n){
            data=n;
            next=null;
        }
    }
    void insert(int n){
        Node newNode=new Node(n);
        if(head==null) 
        head=newNode;
        else{
            Node cur=head;
            while(cur.next!=null){
                cur=cur.next;
            }
            cur.next=newNode;
        }
    }
   boolean create(int a,int b){
       int c=0;
       Node p1=head;
       Node p2=head;
       while(p1.data!=a||c!=b){
           if(p1.data!=a) {
               p1=p1.next;
               if(p1.next==null)
               return false;
           }
           if(c!=b){
               p2=p2.next;
               ++c;
           }
       }
       p2.next=p1;
       return true;
   }
   boolean detect(){
       Node fast=head;
       Node slow=head;
       while(fast.next!=null&&fast.next.next!=null){
           fast=fast.next.next;
           slow=slow.next;
           if(slow==fast)
           return true;
       }
       if(fast.next==null)
       return false;
       return false;
   }
}
class Main{
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        list l=new list();
        for(int i=0;i<n;i++) l.insert(sw.nextInt());
        int a=sw.nextInt();
        int b=n-1;
        l.create(a,b);
        System.out.print(l.detect());
    }
}



//segregation of even and odd numbers in a LL

import java.util.Scanner;
class list{
    node head=null;
    class node{
        int data;
        node next;
        node(int n){
            data=n;
            next=null;
        }
    }
    void insert(int n){
        node newnode = new node(n);
        if(head==null) head=newnode;
        else{
            node cur=head;
            while(cur.next!=null){
                cur=cur.next;
            }
            cur.next=newnode;
        }
    }
    void display(){
        node cur=head;
        while(cur!=null){
            System.out.print(cur.data+"-->");
            cur=cur.next;
        }
        System.out.print("null");
    }
    void seg(){
        node es=null;
        node ee=null;
        node os=null;
        node oe=null;
        node cur=head;
        while(cur!=null){
            if(cur.data%2==0){
                if(es==null) es=ee=cur;
                else{
                    ee.next=cur;
                    ee=cur;
                }
            }
            else{
                if(os==null) os=oe=cur;
                else{
                    oe.next=cur;
                    oe=cur;
                }
            }
            cur=cur.next;
        }
        if(es==null) head=os;
        else{
            head=es;
            ee.next=os;
        }
        oe.next=null;
    }
}
class Main{
    public static void main(String ar[]){
        Scanner sw=new Scanner(System.in);
        int n=sw.nextInt();
        list l=new list();
        for(int i=0;i<n;i++){
            l.insert(sw.nextInt());
        }
        l.display();
        l.seg();
        System.out.println();
        l.display();
    }
}



//Sort the Bitonic DLL

import java.util.Scanner;
class list{
     node head = null;
     class node{
        int data;
        node next;
        node prev;
        node(int n){
            data=n;
            prev=null;
            next=null;
        }
     }
     void insert(int n){
        node newnode = new node(n); 
        if(head==null)
        head=newnode;
        else{
            node cur=head;
            while(cur.next!=null){
                cur=cur.next;
            }
            cur.next=newnode;
            newnode.prev=cur;
        }
     }
     void display(){
        node cur=head;
        while(cur!=null){
            System.out.print(cur.data+"<-->");
            cur=cur.next;
        }
        System.out.print("null");
     }
    void bit(){
        node first=head;
        node last=head;
        node res=null;
        node resend=null;
        while(last.next!=null)
        last=last.next;
        //start the condition checking 
        while(first!=last){
            if(first.data<=last.data){
                if(res==null){
                    res=resend=first;
                    first=first.next;
                }
                else{
                    node cur=first.next;
                    resend.next=first;
                    first.prev=resend;
                    cur.prev=null;
                    first=cur;
                    resend=resend.next;
                }
            }
            else{
                if(res==null){
                    res=resend=last;
                    last=last.prev;
                }
                else{
                    node cur=last.prev;
                    resend.next=last;
                    last.prev=resend;
                    cur.next=null;
                    last=cur;
                    resend=resend.next;
                }
            }
        }
        //after while 
        resend.next=first;
        first.prev=resend;
        head=res;
    } 
}
class Main{
     public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        list l=new list();
        for(int i=0;i<n;i++){
            l.insert(sw.nextInt());
        }
        l.display(); 
        System.out.println();
        l.bit();
        l.display();
     }
}

//Merge sort using DLL

import java.util.Scanner;
class Main{
    static node head=null;
    static class node{
        int data;
        node next;
        node prev;
        node(int n){
            data=n;
            next=null;
            prev=null;
        }
    }
    static void insert(int n){
        node newnode=new node(n);
            if(head==null) head=newnode;
            else{
                node cur=head;
                while(cur.next!=null) cur=cur.next;
                cur.next=newnode;
                newnode.prev=cur;
            }
    }
    static void display(){
        node cur=head;
        while(cur!=null){
            System.out.print(cur.data+"<-->");
            cur=cur.next;
        }
        System.out.println("null");
    }
    static node sort(node first){
        if(first==null||first.next==null)
        return first;
        
        node second=split(first);
        first=sort(fi	rst);
        second=sort(second);
        return merge(first,second);
    }
    static node split(node first){
        node fast=first;
        node slow=first;
        while(fast.next!=null&&fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        node temp=slow.next;
        slow.next=null;
        return temp;
    }
    static node merge(node first,node second){
        if(first==null) return second;
        if(second==null) return first;
        if(first.data<=second.data){
            first.next=merge(first.next,second);
            first.next.prev=first;
            first.prev=null;
            return first;
        }
        else{
            second.next=merge(first,second.next);
            second.next.prev=second;
            second.prev=null;
            return second;
        }
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        for(int i=0;i<n;i++)
        insert(sw.nextInt());
        display();
        head=sort(head);
        display();
    }
}




//Minimun stack
import java.util.*;
import java.util.Scanner;
class Main{
    static Stack<Integer> st = new Stack<>();
    static Stack<Integer> mst = new Stack<>();
    static void push(int n){
        if(st.isEmpty()){
            st.push(n);
            mst.push(n);
        }
        else{
            st.push(n);
            if(n<=mst.peek()) mst.push(n);
        }
    }
    static void pop(){
        int ele=st.pop();
        if(ele==mst.peek()) mst.pop();
    }
    static void getmin(){
        if(mst.isEmpty()) System.out.print("Stack is Empty");
        else System.out.print(mst.peek());
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        for(int i=0;i<n;i++) push(sw.nextInt());
        getmin();
    }
}

//celebrity problem
import java.util.Scanner;
import java.util.Stack;
class Main{
    static void celeb(int c[][],int n){
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<n;i++) st.push(i);
        while(st.size()>=2){
            int a=st.pop();
            int b=st.pop();
            if(c[a][b]==1) st.push(b);
            else st.push(a);
        }
        int pc=st.pop();
        boolean temp=true;
        for(int i=0;i<n;i++){
            if(i!=pc){
                if(c[i][pc]==0||c[pc][i]==1){
                    temp=false;
                    break;
                }
            }
        }
        if(temp){
            System.out.print("celebrity is: "+pc);
            return;
        }
        else System.out.print("No celebrity found");
        
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        int a[][]=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                a[i][j]=sw.nextInt();
            }
        }
        celeb(a,n);
    }
}


//Towers of Hanoi

import java.util.Scanner;
import java.util.Stack;
class Main{
    static Stack<Integer> sr = new Stack<>();
    static Stack<Integer> ax = new Stack<>();
    static Stack<Integer> ds = new Stack<>();
    static void change(Stack<Integer> s1,Stack<Integer> s2,char a,char b){
        int v1,v2;
        if(s1.isEmpty()) v1=Integer.MIN_VALUE;
        else v1=s1.pop();
        if(s2.isEmpty()) v2=Integer.MIN_VALUE;
        else v2=s2.pop();
        if(v1==Integer.MIN_VALUE){
            s1.push(v2);
            System.out.println("The value "+v2+" is moved from "+b+" to "+a);
        }
        else if(v2==Integer.MIN_VALUE){
            s2.push(v1);
            System.out.println("The value "+v1+" is moved from "+a+" to "+b);
        }
        else if(v1<v2){
            s2.push(v2);
            s2.push(v1);
            System.out.println("The value "+v1+" is moved from "+a+" to "+b);
        }
        else{
            s1.push(v1);
            s1.push(v2);
            System.out.println("The value "+v2+" is moved from "+b+" to "+a);
        }
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n = sw.nextInt();
        for(int i=n;i>0;i--) sr.push(i);
        char s='S',a='A',d='D';
        if(n%2==0){
            char temp=a;
            a=d;
            d=temp;
        }
        int moves = (int)(Math.pow(2,n)-1);
        for(int i=1;i<=moves;i++){
            if(i%3==1) change(sr,ds,s,d);
            if(i%3==2) change(sr,ax,s,a);
            if(i%3==0) change(ax,ds,a,d);
        }
    }
}


//stock span problem

import java.util.*;
public class Main {
    static void span(int p[],int n,int s[]){
        Stack<Integer> st = new Stack<>();
        st.push(0);
        s[0]=1;
        for(int i=0;i<n;i++){
            while(!st.isEmpty()&&p[st.peek()]<=p[i]){
                st.pop();
            }
            s[i]=(st.isEmpty()?(i+1):(i-st.peek()));
            st.push(i);
        }
    }
	public static void main(String[] args)
	{
	    Scanner sw= new Scanner(System.in);
	    int n=sw.nextInt();
		int p[] = new int[n];
		for(int i=0;i<n;i++) p[i]=sw.nextInt();
		int s[] = new int[n];
		span(p, n, s);
		for(int i=0;i<n;i++)
		System.out.print(s[i]+" ");
	}
}


//Priority Queue using DLL

import java.util.*;
class node{
    int data;
    int pr;
    node next;
    node prev;
    node(int n,int pri){
        data=n;
        pr=pri;
        next=null;
        prev=null;
    }
}
class Main{
    static node front =null;
    static node rear=null;
    static void insert(int n,int prio){
        node newnode = new node(n,prio);
        if(front ==null){
            front=newnode;
            rear=newnode;
        }
        else if(prio<front.pr){
            newnode.next=front;
            front.prev=newnode;
            front=newnode;
        }
        else{
            node temp=front;
            while(temp.next!=null&&temp.next.pr<=prio){
                temp=temp.next;
            }
            if(temp.next==null){
                temp.next=newnode;
                newnode.prev=temp;
                rear=newnode;
            }
            else{
                newnode.next=temp.next;
                newnode.prev=temp;
                temp.next.prev=newnode;
                temp.next=newnode;
            }
        }
    }
    static void display(){
        node cur=front;
        while(cur!=null){
            System.out.println(cur.data+" "+cur.pr);
            cur=cur.next;
        }
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n = sw.nextInt();
        for(int i=0;i<n;i++){
            int c=sw.nextInt();//value
            int d=sw.nextInt();//priority
            insert(c,d);
        }
        display();
    }
}


//sort without extra space

import java.util.*;
class Main{
    static int min(Queue<Integer> q,int limit){
        int minval=Integer.MAX_VALUE;
        int min_index=-1;
        int n=q.size();
        for(int i=0;i<n;i++){
            int cur=q.poll();
            if(cur<=minval&&i<limit){
                min_index=i;
                minval=cur;
            }
            q.add(cur);
        }
        return min_index;
    }
    static void insertatend(Queue<Integer> q,int min_index){
        int minval=0;
        int n=q.size();
        for(int i=0;i<n;i++){
            int cur=q.poll();
            if(i!=min_index) q.add(cur);
            else minval=cur;
        }
        q.add(minval);
    }
    static void sort (Queue<Integer> q){
        for(int i=0;i<q.size();i++){
            int min_index=min(q,q.size()-i);
            insertatend(q,min_index);
        }
    }
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n = sw.nextInt();
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<n;i++) q.add(sw.nextInt());
        sort(q);
        while(!q.isEmpty()){
            System.out.print(q.poll()+" ");
        }
    }
}


//stack permuatations

import java.util.*;
class Main{
    public static void main(String ar[]){
        Scanner sw = new Scanner(System.in);
        int n=sw.nextInt();
        Queue<Integer> q1 = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();
        for(int i=0;i<n;i++) q1.add(sw.nextInt());
        for(int i=0;i<n;i++) q2.add(sw.nextInt());
        Stack<Integer> st = new Stack<>();
        while(!q1.isEmpty()){
            int ele=q1.poll();
            if(ele==q2.peek()){
                q2.poll();
                while(!st.isEmpty()){
                    if(st.peek()==q2.peek()){
                        st.pop();
                        q2.poll();
                    }
                    else{
                        break;
                    }
                }
            }
            else st.push(ele);
        }
        if(q1.isEmpty()&&st.isEmpty()){
            System.out.print("Yes");
        }
        else System.out.print("No");
    }
}

